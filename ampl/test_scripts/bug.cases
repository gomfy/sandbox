#!/usr/bin/env bash

# Author(s): 	David M. Gay <dmg@ampl.com>,
#               Gyorgy Matyasfalvi <matyasfalvi@ampl.com>, 
#		        Marcos Dominguez <marcos@ampl.com>
#
# Description: 	Test script that runs a set of numbered tests based on Dave's original tests. 
#               

#input_args=("$@")
#echo "${input_args[@]}"
#printf 'Original arguments: "${input_args[@]}" \n'

# Load user defined variables and functions
source ./functions.sh

# Parse arguments and set variables
parse_args "$@"

# Check for correct ussage
if (( NUM_VALID_EXEC <= 0 )); then
    print_error
    print_usage
    exit $EXIT_FAILURE
fi

# Get the first valid executable name
ampl_cmd="${VALID_EXEC_ARRAY[0]}"
# Get ampl options
ampl_options=

# Depending on OS define MD5 command
get_md5 md5_cmd

# Check if output dir exists
if [ ! -d "$OUTPUT_DIR" ]; then
    mkdir "$OUTPUT_DIR"
fi


# Start testing

if [ "$VERBOSE_MODE" = true ]; then
    for i in "${NO_TEST_MESSAGE[@]}"
    do
        printf "$i"
    done
    if (( NUM_VALID_EXEC != 1 )); then
        printf "INFO:    \t'$ampl_cmd' is being tested only...\n"
    fi
    if (( NUM_NO_TEST > 0 || NUM_VALID_EXEC != 1 )); then
        printf "\n"
    fi
fi

# Tell user which files contain info and create them
hash_file="./$OUTPUT_DIR/$(basename $0).$ampl_cmd.hash"
> "$hash_file"
if [ "$VERBOSE_MODE" = true ]; then
    printf "hash_file:$hash_file\n"
fi
time_file="./$OUTPUT_DIR/$(basename $0).$ampl_cmd.time"
> "$time_file"
if [ "$VERBOSE_MODE" = true ]; then
    printf "time_file:$time_file\n"
fi

# Run tests depending on RUN_TEST value 

test_id=1
test_tag="subscript-error"
if [[ "$test_id" -eq 1 && "$ampl_cmd" == "ax" ]]; then
    param_N=11
else
    param_N=7
fi
if [[ "$RUN_TEST" == "all" || "$RUN_TEST" -eq "$test_id" ]]; then
$ampl_cmd $ampl_options <<!!! 2>&1 | $md5_cmd | awk -v id="id:$test_id" -v tag="tag:$test_tag" '{ print id"\t"tag"\thash:"$1 }' &>> $hash_file
param sum_solve_time >= 0;
let sum_solve_time := 0;
param N integer > 0;
param p{i in 1..N} :=  p[10];
data;
param N := $param_N;
display N;
printf "id:$test_id\ttag:$test_tag\tampl_time:%f\tsum_solve_time:%f\n", _ampl_time, sum_solve_time>>$time_file;
!!!
fi

test_id=2
test_tag=" "
if [[ "$test_id" -eq 2 && "$ampl_cmd" == "ax" ]]; then
    param_N=13
else
    param_N=8
fi
if [[ "$RUN_TEST" == "all" || "$RUN_TEST" -eq "$test_id" ]]; then
$ampl_cmd $ampl_options <<!!! 2>&1 | $md5_cmd | awk -v id="id:$test_id" -v tag="tag:$test_tag" '{ print id"\t"tag"\thash:"$1 }' &>> $hash_file
param sum_solve_time >= 0;
let sum_solve_time := 0;
param N integer > 0;
param p{i in 1..N} :=  p[10];
data;
param N := $param_N;
display N;
printf "id:$test_id\ttag:$test_tag\tampl_time:%f\tsum_solve_time:%f\n", _ampl_time, sum_solve_time>>$time_file;
!!!
fi

test_id=3
test_tag="subscript-error"
if [[ "$RUN_TEST" == "all" || "$RUN_TEST" -eq "$test_id" ]]; then
$ampl_cmd $ampl_options <<!!! 2>&1 | $md5_cmd | awk -v id="id:$test_id" -v tag="tag:$test_tag" '{ print id"\t"tag"\thash:"$1 }' &>> $hash_file
param sum_solve_time >= 0;
let sum_solve_time := 0;
param N integer > 0;
param p{i in 1..N} :=  p[10];
data;
param N := 8;
display N;
printf "id:$test_id\ttag:$test_tag\tampl_time:%f\tsum_solve_time:%f\n", _ampl_time, sum_solve_time>>$time_file;
!!!
fi
